complete_set = {
  0 : "!",
  1 : "@",
  2 : "#",
  3 : "$",
  4 : "%",
  5 : "^",
  6 : "&",
  7 : "*",
  8 : "(",
  9 : ")",
  10 : "-",
  11 : "_",
  12 : "=",
  13 : "+",
  14 : "1",
  15 : "2",
  16 : "3",
  17 : "4",
  18 : "5",
  19 : "6",
  20 : "7",
  21 : "8",
  22 : "9",
  23 : "0",
  24 : ",",
  25 : ".",
  26 : "<",
  27 : ">",
  28 : "/",
  29 : "?",
  30 : "`",
  31 : "~",
  32 : "[",
  33 : "{",
  34 : "]",
  35 : "}",
  36 : "\"",
  37 : "|",
  38 : ";",
  39 : ":",
  40 : "\'",
  41 : " ",
  42 : "a",
  43 : "b",
  44 : "c",
  45 : "d",
  46 : "e",
  47 : "f",
  48 : "g",
  49 : "h",
  50 : "i",
  51 : "j",
  52 : "k",
  53 : "l",
  54 : "m",
  55 : "n",
  56 : "o",
  57 : "p",
  58 : "q",
  59 : "r",
  60 : "s",
  61 : "t",
  62 : "u",
  63 : "v",
  64 : "w",
  65 : "x",
  66 : "y",
  67 : "z",
  68 : "A",
  69 : "B",
  70 : "C",
  71 : "D",
  72 : "E",
  73 : "F",
  74 : "G",
  75 : "H",
  76 : "I",
  77 : "J",
  78 : "K",
  79 : "L",
  80 : "M",
  81 : "N",
  82 : "O",
  83 : "P",
  84 : "Q",
  85 : "R",
  86 : "S",
  87 : "T",
  88 : "U",
  89 : "V",
  90 : "W",
  91 : "X",
  92 : "Y",
  93 : "Z",
}



def xv2_cipher():
  global og_word
  new_word = ""
  shift_numba1 = int(raw_input("#1: "))
  shift_numba2 = int(raw_input("#2: "))
  shift_numba3 = int(raw_input("#3: "))
  y_key = ((shift_numba1 * (shift_numba2 + shift_numba2)) / shift_numba3)
  for x in og_word:
      for c in complete_set:
        if (x == complete_set[c]):
          x_key = complete_set.keys()[complete_set.values().index(x)]
          new_word += complete_set[((x_key + y_key)%93)]
          y_key += 1
  print new_word      

def decode_xv2_cipher():
  print " "
  new_word = ""
  global og_word
  shift_numba1 = int(raw_input("#1: "))
  shift_numba2 = int(raw_input("#2: "))
  shift_numba3 = int(raw_input("#3: "))
  y_key = (((shift_numba1 * (shift_numba2 + shift_numba2)) / shift_numba3))
  for x in og_word:
      for c in complete_set:
        if (x == complete_set[c]):
          x_key = complete_set.keys()[complete_set.values().index(x)]
          new_word += complete_set[((x_key - y_key)%93)]
          y_key += 1
  print new_word


def secret_cipher():
  global og_word
  new_word = ""
  new_word2 = ""
  shift_numba1 = float(raw_input("#1: "))
  shift_numba2 = float(raw_input("#2: "))
  shift_numba3 = float(raw_input("#3: "))
  y_key = int(((shift_numba1 * (shift_numba2 + shift_numba2)) / shift_numba3) * 100)
  for x in og_word:
      for c in complete_set:
        if (x == complete_set[c]):
          x_key = complete_set.keys()[complete_set.values().index(x)]
          new_word += complete_set[((x_key + y_key)%93)]
          y_key += 1
  y_key = int(shift_numba3 * shift_numba2 / shift_numba1)
  for x in og_word:
      for c in complete_set:
        if (x == complete_set[c]):
          x_key = complete_set.keys()[complete_set.values().index(x)]
          new_word2 += complete_set[((x_key + y_key)%93)]
          y_key += 1  
  print new_word2 
  og_word = new_word2

def decode_secret_cipher():
  global og_word
  new_word = ""
  new_word2 = ""
  shift_numba1 = float(raw_input("#1: "))
  shift_numba2 = float(raw_input("#2: "))
  shift_numba3 = float(raw_input("#3: "))
  y_key = int(((shift_numba1 * (shift_numba2 + shift_numba2)) / shift_numba3) * 100)
  for x in og_word:
      for c in complete_set:
        if (x == complete_set[c]):
          x_key = complete_set.keys()[complete_set.values().index(x)]
          new_word += complete_set[((x_key - y_key)%93)]
          y_key += 1
  y_key = int(shift_numba3 * shift_numba2 / shift_numba1)
  for x in og_word:
      for c in complete_set:
        if (x == complete_set[c]):
          x_key = complete_set.keys()[complete_set.values().index(x)]
          new_word2 += complete_set[((x_key - y_key)%93)]
          y_key += 1  
  print new_word2 

og_word = raw_input()
secret_cipher()
decode_secret_cipher()
